{"version":3,"sources":["images/logo.png","components/pastry.js","Pastries.js","Home.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pastry","props","className","name","src","img","description","calories","pastryList","Pastries","useState","pastries","map","v","i","key","Home","navheader","zIndex","logoStyle","marginRight","NavBar","Navbar","style","bg","variant","to","logo","alt","width","height","Nav","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,0NCc5BC,MAXf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,QAAd,IAAuBD,EAAME,KAA7B,KACA,yBAAKD,UAAU,MAAME,IAAKH,EAAMI,MAChC,uBAAGH,UAAU,QAAb,IAAsBD,EAAMK,YAA5B,KACA,uBAAGJ,UAAU,OAAb,IAAqBD,EAAMM,SAA3B,eCNRC,EAAa,CACf,CACEL,KAAM,WACNI,SAAU,IACVF,IACE,qFACFC,YAAa,4DAEf,CACEH,KAAM,SACNI,SAAU,IACVF,IACE,+EACFC,YACE,gHAEJ,CACEH,KAAM,YACNI,SAAU,IACVF,IACE,wKACFC,YAAa,0CAIF,SAASG,IAAY,IAAD,EACDC,mBAASF,GADR,mBAC1BG,EAD0B,UAG/B,OACE,yBAAKT,UAAU,cACZS,EAASC,KAAI,SAACC,EAAGC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAK,gBACLZ,KAAMU,EAAEV,KACRE,IAAKQ,EAAER,IACPE,SAAUM,EAAEN,SACZD,YAAaO,EAAEP,kB,MC3BdU,MAVf,WACI,OAEI,yBAAKd,UAAU,QACb,wBAAIA,UAAU,SAAd,e,gDCAJe,EAAY,CACdC,OAAQ,GAGNC,EAAY,CACdC,YAAa,IAIF,SAASC,IACpB,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAON,EAAWO,GAAG,OAAOC,QAAQ,QAC1C,kBAAC,IAAD,CAAMvB,UAAU,eAAewB,GAAG,KAChC,yBACEtB,IAAKuB,IACLC,IAAI,OACJC,MAAM,KACNC,OAAO,KACPP,MAAOJ,IANX,aAUE,kBAACY,EAAA,EAAD,CAAK7B,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWwB,GAAG,KAA9B,QAGA,kBAAC,IAAD,CAAMxB,UAAU,WAAWwB,GAAG,aAA9B,cAMN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,aACV,kBAACvB,EAAD,OAEF,kBAAC,IAAD,CAAOuB,KAAK,KACV,kBAAC,EAAD,S,YC9BGC,MATf,WACE,OACE,yBAAK/B,UAAU,OAEb,kBAACmB,EAAD,QCEca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ead99c17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4d78386a.png\";","import React from 'react'\r\nimport './pastry.css'\r\n\r\nfunction Pastry(props) {\r\n    return (\r\n        <div className=\"pastry\">\r\n            <h3 className='name'> {props.name} </h3>\r\n            <img className='img' src={props.img}></img>\r\n            <p className=\"desc\"> {props.description} </p>\r\n            <p className=\"cal\"> {props.calories} calories</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pastry","import React, { useState } from \"react\";\r\nimport Pastry from \"./components/pastry\"\r\n\r\nlet pastryList = [\r\n  {\r\n    name: \"Napoleon\",\r\n    calories: 300,\r\n    img:\r\n      \"https://ofbatteranddough.com/wp-content/uploads/2016/09/600-Napoleon-dessert-8.jpg\",\r\n    description: \"A light buttery flakey pastry filled with bavarian creme\",\r\n  },\r\n  {\r\n    name: \"Canoli\",\r\n    calories: 200,\r\n    img:\r\n      \"https://www.browneyedbaker.com/wp-content/uploads/2010/01/cannoli-65-754.jpg\",\r\n    description:\r\n      \"Italian pastries consisting of tube-shaped shells of fried pastry dough, filled with a sweet, creamy filling\",\r\n  },\r\n  {\r\n    name: \"Croissant\",\r\n    calories: 150,\r\n    img:\r\n      \"https://www.thespruceeats.com/thmb/QKBOaapSCzMfE0deUda9IJMAh9s=/1806x1806/smart/filters:no_upscale()/croissantscropGettyImages-590585455-56ed366a3df78ce5f8367412.jpg\",\r\n    description: \"A buttery, flaky, viennoiserie pastry\",\r\n  },\r\n];\r\n\r\nexport default function Pastries() {\r\n  const [pastries, setPastries] = useState(pastryList);\r\n    \r\n    return (\r\n      <div className=\"pastryList\">\r\n        {pastries.map((v, i) => {\r\n          return (\r\n            <Pastry\r\n              key={\"${i}${v.name}\"}\r\n              name={v.name}\r\n              img={v.img}\r\n              calories={v.calories}\r\n              description={v.description}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n}","import React from 'react'\r\nimport \"./Home.css\"\r\n\r\nfunction Home() {\r\n    return (\r\n    //   <div className=\"home\">\r\n        <div className=\"body\">\r\n          <h1 className=\"title\">Panaderia</h1>\r\n        </div>\r\n    //   </div>\r\n    );\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport Pastries from '../Pastries'\r\nimport Home from '../Home'\r\nimport logo from '../images/logo.png'\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap'\r\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\n\r\nconst navheader = {\r\n    zIndex: 1\r\n}\r\n\r\nconst logoStyle = {\r\n    marginRight: 15\r\n}\r\n\r\n\r\nexport default function NavBar() {\r\n    return (\r\n      <Router>\r\n        <Navbar style={navheader} bg=\"dark\" variant=\"dark\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            <img\r\n              src={logo}\r\n              alt=\"Logo\"\r\n              width=\"30\"\r\n              height=\"30\"\r\n              style={logoStyle}\r\n            />\r\n            Panaderia\r\n          </Link>\r\n            <Nav className=\"mr-auto\">\r\n              <Link className=\"nav-link\" to=\"/\">\r\n                Home\r\n              </Link>\r\n              <Link className=\"nav-link\" to=\"/Pastries\">\r\n                Pastries\r\n              </Link>\r\n            </Nav>\r\n        </Navbar>\r\n\r\n        <Switch>\r\n          <Route path=\"/Pastries\">\r\n            <Pastries />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n}","import React from 'react';\nimport NavBar from './components/NavBar'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Routing inside NavBar */}\n      <NavBar/> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}